#! /bin/bash

set -e

if [ "$DEBUG" = true ]; then
  PACKER_LOG_VALUE=true
fi

# Test to make sure we have the external variables we need
if [ ! -f vars.json ]; then
  cp example-vars.json vars.json
  echo "  Please edit the project's vars.json file before running this script"
  echo "   Leave the _password vars blank if you want them to be autogenerated"
  exit 1
fi

function check_builder {
  if [ "$1" == "amazon-ebs" ] || [ "$1" == "amazon-instance" ] || [ "$1" == "vmware-iso" ] || [ "$1" == "virtualbox-iso" ]; then
    if [[ "$BUILDER" != *only* ]]; then
      BUILDER="-only=$1"
    else
      BUILDER="$BUILDER,$1"
    fi
  else
    echo "  The requested Packer.io builder \"$1\" is not yet supported"
    echo "   Supported builders: 'amazon-ebs', 'amazon-instance', 'vmware-iso', and 'virtualbox-iso'"
    exit 1
  fi
}

# Configure a particular Packer.io builder, if desired
if [ ! -z "$1" ]; then
  if [ "$1" != "validate" ]; then
    OIFS="$IFS"
    IFS=','
    for BUILDER_VALUE in $1; do
      check_builder "$BUILDER_VALUE"
    done
    IFS="$OIFS"
  else
    BUILDER="skip-build"
  fi
fi

# Turn the URL for this git repository into a URL more fit for human consumption
function humanize-repo-url {
  if hash git 2>/dev/null; then
    if [ -f ".git/config" ] && [ `cat .git/config |grep -c "\[remote"` -gt 1 ]; then
      GIT_REPO_URL=$(git config --get remote.origin.url)

      if [[ $GIT_REPO_URL == git@* ]]; then
        GIT_REPO_URL="${GIT_REPO_URL/git@/https:\/\/}"
      fi

      if [[ $GIT_REPO_URL == *.git ]]; then
        GIT_REPO_URL="${GIT_REPO_URL/\.git/}"
      fi

      GIT_REPO_URL="${GIT_REPO_URL/github.com:/github.com/}"
    fi
  fi
}

function extract_from_json {
  export ${1}=`grep -Po "\"${2}\": ?\".*\",?" ${3}.json | sed "s/\"${2}\": \"//" | tr -d "\","`
}

# The main work of the script
function build {
  if [ "$BUILDER" == "skip-build" ]; then
    packer validate -var-file=vars.json xn-ubuntu1404.json
  else
    packer validate $BUILDER -var-file=vars.json xn-ubuntu1404.json
  fi

  # Looks to see if the vars file has any empty password variables; creates passwords if needed
  while read LINE; do
    if [ ! -z "$LINE" ]; then
      REPLACEMENT="_password\": \"`openssl rand -base64 12`\""

      # If the passwords file doesn't exist, look for empty passwords to fill with new values
      if [ ! -f .passwords ]; then
        PASSWORD_PATTERN="_password\": \"\""
      # If the passwords file exists, we're okay with autogenerating new passwords each time
      else
        PASSWORD_PATTERN="_password\": \"*\""
      fi

      NEWLINE="${LINE/$PASSWORD_PATTERN/$REPLACEMENT}"

      # If we've autogenerated a password, make a note so we will do it again with each build
      if [ "$NEWLINE" != "$LINE" ]; then
        touch .passwords
      fi

      echo $NEWLINE
    fi
  done <vars.json > vars.json.new
  mv vars.json.new vars.json

  # If we're not running in CI, use vars file; else, use ENV vars
  if [ -z "$CONTINUOUS_INTEGRATION" ]; then
    humanize-repo-url
    if [ ! -z "$GIT_REPO_URL" ]; then REPO_URL_VAR="--var packer_repo=$GIT_REPO_URL"; fi

    # If we're running in debug mode, inform which repository we're building from
    if [ "$DEBUG" = true ] && [ ! -z "$GIT_REPO_URL" ]; then
      echo "Running new build checked out from $GIT_REPO_URL"
    fi

    if [ "$BUILDER" != "skip-build" ]; then
      PACKER_LOG=$PACKER_LOG_VALUE packer build $BUILDER $REPO_URL_VAR -var-file=vars.json xn-ubuntu1404.json
    fi
  else
    echo "Running within Travis [Builder: $BUILDER]"
    ADMIN_PASSWORD=`openssl rand -base64 12`
    SECRET_KEY=`openssl rand -base64 12`

    PACKER_LOG=$PACKER_LOG_VALUE packer -machine-readable build $BUILDER \
      -var "admin_password=${ADMIN_PASSWORD}" \
      -var "secret_key_password=${SECRET_KEY}" \
      xn-ubuntu1404.json | tee packer.log
  fi
}

build
